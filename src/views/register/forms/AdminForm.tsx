import CustomBanner from '@src/components/customBanner/CustomBanner';
import CustomDialogAlert from '@src/components/customDialogAlert/CustomDialogAlert';
import ErrorInputForm from '@src/components/customErrorInputForm/CustomErrorInputForm';
import CustomIcon from '@src/components/customIcon/CustomIcon';
import CustomInputForm from '@src/components/customInputForm/CustomInputForm';
import CustomLoadingOverlay from '@src/components/customLoadingOverlay/CustomLoadingOverlay';
import {lightTheme} from '@src/hooks/lightMode';
import {ActualTheme} from '@src/hooks/navigator/hook/GlobalTheme';
import {RegisterType} from '@src/types/globalTypes';
import {DataKey} from '@src/types/userTypes';
import {Fragment, useRef, useState} from 'react';
import {useTranslation} from 'react-i18next';
import {
  Dimensions,
  KeyboardAvoidingView,
  Platform,
  ScrollView,
  View,
  useColorScheme
} from 'react-native';
import {TouchableOpacity} from 'react-native-gesture-handler';
import {Button, Text, TextInput} from 'react-native-paper';
import {registerStyles} from '../styles/registerStyles';
import {AdminFormHook} from './hooks/adminFormHook';

const AdminForm = ({type}: {type: RegisterType}) => {
  const colorScheme = useColorScheme();
  const phoneRef = useRef<any>();
  const {colors, dark, theme} = ActualTheme();
  const {t} = useTranslation();
  const [activeTab, setActiveTab] = useState(2);
  const windowWidth = Dimensions.get('window').width;
  const {
    myCurrentLocation,
    setCurrentButtonAction,
    generateGroupCode,
    searchGroup,
    alertGroupFound,
    setAlertGroupFound,
    onChangeInput,
    groupFound,
    submitForm,
    user,
    alertUserExist,
    setAlertUserExist,
    setCodeAutogenerated,
    codeAutogenerated,
    isLoadingForm,
    countryCode,
    errorRegister,
    setErrorRegister,
    errorPhone,
    value,
    isNotValidEmail,
    isNotSubmit,
    setIsNotSubmit,
    emailValidate
  } = AdminFormHook(type, phoneRef);

  // console.log('myCurrentLocation?????????', myCurrentLocation);

  return isLoadingForm ? (
    <CustomLoadingOverlay visible={isLoadingForm} />
  ) : countryCode && (countryCode != undefined || countryCode != '') ? (
    <View>
      {type === 'residence' && (
        <CustomBanner
          visible={true}
          text={`${t('registerView.banner')} ${t('drawer.users')}!`}
          icon="account-group"
        />
      )}
      <CustomDialogAlert
        visible={alertUserExist}
        setVisible={setAlertUserExist}
        title={t('registerView.errorUserRegisterTitle')}
        description={t('registerView.errorUserRegisterDescription')}
      />
      <CustomDialogAlert
        visible={!isNotSubmit && alertGroupFound}
        setVisible={setAlertGroupFound}
        title={t('adminFormView.alertGroupFoundTitle')}
        description={t('adminFormView.alertGroupFoundDescription')}
        actionSuccess={setIsNotSubmit}
      />
      <CustomDialogAlert
        visible={errorRegister}
        setVisible={setErrorRegister}
        title={t('registerView.errorRegisterTitle')}
        description={t('registerView.errorRegisterDescription')}
      />
      <KeyboardAvoidingView
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        style={{flex: 1}}>
        {type === 'residence' && (
          <View style={registerStyles.tabContainer}>
            <TouchableOpacity
              style={[
                activeTab === 2
                  ? [
                      registerStyles.activeButton,
                      {
                        borderBottomColor:
                          colorScheme == 'dark'
                            ? colors.onPrimaryContainer
                            : dark
                            ? colors.surface
                            : colors.onPrimaryContainer,
                        backgroundColor:
                          colorScheme == 'dark'
                            ? colors.onPrimaryContainer
                            : dark
                            ? colors.inversePrimary
                            : colors.onPrimaryContainer,
                        shadowColor: colors.elevation.level3
                      }
                    ]
                  : [registerStyles.inactiveButton],
                {width: (windowWidth / 2) * 0.96}
              ]}
              onPress={() => setActiveTab(2)}>
              <Text
                style={{
                  color:
                    activeTab === 2
                      ? colorScheme == 'dark'
                        ? colors.surface
                        : dark
                        ? colors.onSurface
                        : colors.surface
                      : colors.onSurfaceDisabled
                }}>
                {t('adminFormView.newGroup')}
              </Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={[
                activeTab === 3
                  ? [
                      registerStyles.activeButton,
                      {
                        borderBottomColor:
                          colorScheme == 'dark'
                            ? colors.onPrimaryContainer
                            : dark
                            ? colors.surface
                            : colors.onPrimaryContainer,
                        backgroundColor:
                          colorScheme == 'dark'
                            ? colors.onPrimaryContainer
                            : dark
                            ? colors.inversePrimary
                            : colors.onPrimaryContainer,
                        shadowColor: colors.elevation.level3
                      }
                    ]
                  : [registerStyles.inactiveButton],
                {width: (windowWidth / 2) * 0.96}
              ]}
              onPress={() => setActiveTab(3)}>
              <Text
                style={{
                  color:
                    activeTab === 3
                      ? colorScheme == 'dark'
                        ? colors.surface
                        : dark
                        ? colors.onSurface
                        : colors.surface
                      : colors.onSurfaceDisabled
                }}>
                {t('adminFormView.existentGroup')}
              </Text>
            </TouchableOpacity>
          </View>
        )}
        <ScrollView
          style={registerStyles.body}
          showsVerticalScrollIndicator={false}>
          <View
            style={{
              display: 'flex',
              justifyContent: 'center',
              alignItems: 'center'
            }}>
            {type === 'residence' && (
              <Fragment>
                <Text
                  style={{
                    marginTop: 10,
                    color: colors.onSurface,
                    textAlign: 'left',
                    width: 280
                  }}>
                  {t('general.groupData')}:
                </Text>
                <TextInput
                  label={t('adminFormView.group')}
                  style={registerStyles.input}
                  theme={theme}
                  keyboardType="numeric"
                  placeholderTextColor={lightTheme.colors.outlineVariant}
                  placeholder="XXXXXX89"
                  value={user?.group_number ?? ''}
                  onChangeText={text =>
                    onChangeInput(text as never, 'group_number' as DataKey)
                  }
                  disabled={activeTab == 2 ? true : false}
                  onBlur={() => {
                    if (activeTab == 3) {
                      setIsNotSubmit(true);
                      !codeAutogenerated &&
                        user?.group_number != '' &&
                        searchGroup();
                      setCodeAutogenerated(false);
                    }
                  }}
                  left={
                    <TextInput.Icon
                      icon={() => (
                        <CustomIcon
                          name={'sitemap'}
                          color={colors.onSurface}
                          font={'awesome'}
                          size={28}
                        />
                      )}
                    />
                  }
                  right={
                    activeTab == 2 && (
                      <TextInput.Icon
                        icon={() => (
                          <CustomIcon
                            name={'refresh'}
                            color={colors.onPrimaryContainer}
                            font={'awesome'}
                          />
                        )}
                        onPress={generateGroupCode}
                      />
                    )
                  }
                />
                {activeTab == 3 && alertGroupFound && (
                  <ErrorInputForm
                    error={t('adminFormView.alertGroupFoundTitle')}
                    marginTop={0}
                  />
                )}
                <TextInput
                  label={t('adminFormView.groupAlias')}
                  style={registerStyles.input}
                  theme={theme}
                  placeholderTextColor={lightTheme.colors.outlineVariant}
                  placeholder={t('adminFormView.placeHolderAliasGroup')}
                  value={user?.group_name ?? ''}
                  editable={groupFound ? false : true}
                  onChangeText={text =>
                    onChangeInput(text as never, 'group_name' as DataKey)
                  }
                  disabled={activeTab == 3 ? true : false}
                  left={
                    <TextInput.Icon
                      icon={() => (
                        <CustomIcon
                          name={'building-o'}
                          color={colors.onSurface}
                          font={'awesome'}
                          size={28}
                        />
                      )}
                    />
                  }
                />
              </Fragment>
            )}
            <View style={{marginVertical: 15, width: 280}}>
              <CustomInputForm
                phoneRef={phoneRef}
                setButtonAction={setCurrentButtonAction}
                type="phone"
                value={value ?? undefined}
                code={countryCode}
                isDisabled
                isRegister
              />
            </View>
            {errorPhone && (
              <View style={{paddingTop: 40}}>
                <ErrorInputForm error={t('loginView.errorPhone')} />
              </View>
            )}
            <Text
              style={{
                marginTop: 10,
                color: colors.onSurface,
                textAlign: 'left',
                width: 280
              }}>
              {t('general.personalData')}:
            </Text>
            <TextInput
              label={t('adminFormView.names')}
              style={registerStyles.input}
              theme={theme}
              onChangeText={text =>
                onChangeInput(text as never, 'name' as DataKey)
              }
              value={user?.name ?? undefined}
              left={
                <TextInput.Icon
                  icon={() => (
                    <CustomIcon
                      name={'pencil'}
                      color={colors.onSurface}
                      font={'awesome'}
                    />
                  )}
                />
              }
            />
            <TextInput
              label={t('adminFormView.lastNames')}
              style={registerStyles.input}
              theme={theme}
              onChangeText={text =>
                onChangeInput(text as never, 'lastname' as DataKey)
              }
              value={user?.lastname ?? undefined}
              left={
                <TextInput.Icon
                  icon={() => (
                    <CustomIcon
                      name={'pencil'}
                      color={colors.onSurface}
                      font={'awesome'}
                    />
                  )}
                />
              }
            />
            <TextInput
              label={t('adminFormView.email')}
              style={registerStyles.input}
              theme={theme}
              inputMode="email"
              onBlur={() => user?.email && emailValidate(user?.email)}
              onChangeText={text =>
                onChangeInput(text as never, 'email' as DataKey)
              }
              value={user?.email ?? undefined}
              left={
                <TextInput.Icon
                  icon={() => (
                    <CustomIcon
                      name={'envelope'}
                      color={colors.onSurface}
                      font={'awesome'}
                    />
                  )}
                />
              }
            />
            {isNotValidEmail && (
              <View style={{paddingTop: 40}}>
                <ErrorInputForm error={t('loginView.errorEmail')} />
              </View>
            )}
            <TextInput
              label={t('adminFormView.aliasName')}
              style={registerStyles.input}
              theme={theme}
              placeholderTextColor={lightTheme.colors.outlineVariant}
              placeholder={t('adminFormView.aliasPlaceHolder')}
              onChangeText={text =>
                onChangeInput(text as never, 'alias' as DataKey)
              }
              value={user?.alias ?? undefined}
              left={
                <TextInput.Icon
                  icon={() => (
                    <CustomIcon
                      name={'home'}
                      color={colors.onSurface}
                      font={'awesome'}
                      size={28}
                    />
                  )}
                />
              }
            />
            <TextInput
              label={t('adminFormView.country')}
              style={registerStyles.input}
              theme={theme}
              editable={false}
              value={myCurrentLocation?.country?.long_name}
              left={
                <TextInput.Icon
                  icon={() => (
                    <CustomIcon
                      name={'map'}
                      color={colors.onSurface}
                      font={'awesome'}
                    />
                  )}
                />
              }
            />
            <TextInput
              label={t('adminFormView.address')}
              style={registerStyles.input}
              theme={theme}
              editable={false}
              value={myCurrentLocation?.address}
              left={
                <TextInput.Icon
                  icon={() => (
                    <CustomIcon
                      name={'map-marker'}
                      color={colors.onSurface}
                      font={'awesome'}
                      size={29}
                    />
                  )}
                />
              }
            />
            <TextInput
              label={t('adminFormView.city')}
              style={registerStyles.input}
              theme={theme}
              editable={false}
              value={myCurrentLocation?.city?.long_name}
              left={
                <TextInput.Icon
                  icon={() => (
                    <CustomIcon
                      name={'city'}
                      color={colors.onSurface}
                      font={'materialMc'}
                      size={29}
                    />
                  )}
                />
              }
            />
            <TextInput
              label={t('adminFormView.state')}
              style={registerStyles.input}
              theme={theme}
              editable={false}
              value={myCurrentLocation?.state?.long_name}
              left={
                <TextInput.Icon
                  icon={() => (
                    <CustomIcon
                      name={'flag'}
                      color={colors.onSurface}
                      font={'awesome'}
                    />
                  )}
                />
              }
            />
            <View
              style={{
                marginTop: 30,
                marginBottom: Platform.OS == 'android' ? 120 : 70
              }}>
              <Button
                textColor="white"
                mode="contained"
                icon="check"
                buttonColor={
                  dark ? colors.primaryContainer : colors.onPrimaryContainer
                }
                onPress={submitForm}>
                {t('general.continue')}
              </Button>
            </View>
          </View>
        </ScrollView>
      </KeyboardAvoidingView>
    </View>
  ) : (
    <CustomLoadingOverlay visible />
  );
};

export default AdminForm;
